// Generated by Robert M. Lefkowitz <code@liberally.net> in 2024 using ChatGPT
// from a file containing the following notice:

/*
 * Copyright (c) 1980, 1987, 1992, 1993
 *  The Regents of the University of California.  All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. Neither the name of the University nor the names of its contributors
 *    may be used to endorse or promote products derived from this software
 *    without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
 * OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
 * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 * LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
 * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
 * SUCH DAMAGE.
 */

import Foundation
import Shared

extension FileHandle {
  func readLine() -> String? {
    var line = ""
    while let char = try? self.read(upToCount: 1), let string = String(data: char, encoding: .utf8), !string.isEmpty {
      if string == "\n" {
        line += string
        break
      }
      line += string
    }
    return line.isEmpty ? nil : line
  }
}

@main final class head : ShellCommand {
  
  func head(_ file: FileHandle, lines: Int) {
    var count = lines
    while count > 0, let line = file.readLine() {
      print(line, terminator: "")
      count -= 1
    }
  }
  
  func headBytes(_ file: FileHandle, bytes: Int) {
    var remainingBytes = bytes
    let bufferSize = 4096
    var buffer = Data(repeating: 0, count: bufferSize)
    
    while remainingBytes > 0 {
      let bytesToRead = min(bufferSize, remainingBytes)
      let data = file.readData(ofLength: bytesToRead)
      guard !data.isEmpty else { break }
      remainingBytes -= data.count
      FileHandle.standardOutput.write(data)
    }
  }
  
  func obsolete(_ args: inout [String]) {
    for (index, arg) in args.enumerated() {
      guard arg.starts(with: "-"), arg.dropFirst().allSatisfy({ $0.isNumber }) else { continue }
      args[index] = "-n" + String(arg.dropFirst())
    }
  }
  
  var usage : String = "usage: head [-n lines | -c bytes] [file ...]"
  
  
  // Main program
  struct CommandOptions {
    var args = CommandLine.arguments
    var lineCount: Int? = nil
    var byteCount: Int? = nil
  }
  
  
  func parseOptions() throws(CmdErr) -> CommandOptions {
    var opts = CommandOptions()
    
    let oo : [Shared.option] = [
      Shared.option.init("bytes", .required_argument),
      Shared.option.init("lines", .required_argument),
    ]
    
    let go = BSDGetopt_long("cn", oo)
    
    // FIXME: put this back
    //               obsolete(&args)
    
    while let (k, v) = try go.getopt_long() {
      switch k {
        case "n", "lines":
          if let value = Int(v) {
            opts.lineCount = value
          } else {
            throw CmdErr(1)
          }
        case "c", "bytes":
          if let value = Int(v) {
            opts.byteCount = value
          } else {
            throw CmdErr(1)
          }
        default: throw CmdErr(1)
      }
    }
    
    if opts.lineCount == nil, opts.byteCount == nil {
      opts.lineCount = 10
    }
    
    opts.args = go.remaining
    
    
    if let lineCount = opts.lineCount, let byteCount = opts.byteCount {
      throw CmdErr(1, "Cannot combine line and byte counts")
    }
    return opts
  }
  
  func runCommand(_ opts : CommandOptions) throws(CmdErr) {
    let useStandardInput = opts.args.isEmpty
    if useStandardInput {
      if let lineCount = opts.lineCount {
        head(FileHandle.standardInput, lines: lineCount)
      } else if let byteCount = opts.byteCount {
        headBytes(FileHandle.standardInput, bytes: byteCount)
      }
    } else {
      var se = FileHandle.standardError
      for file in opts.args {
        let u = URL(filePath: file)
        var fileHandle : FileHandle
        do {
          fileHandle = try FileHandle(forReadingFrom: u)
        } catch( let e) {
          print("Cannot open file: \(file) \(e.localizedDescription))", to: &se)
          continue
        }
        
        if opts.args.count > 1 {
          print("\n==> \(file) <==")
        }
        
        if let lineCount = opts.lineCount {
          head(fileHandle, lines: lineCount)
        } else if let byteCount = opts.byteCount {
          headBytes(fileHandle, bytes: byteCount)
        }
        try? fileHandle.close()
      }
    }
  }
}
