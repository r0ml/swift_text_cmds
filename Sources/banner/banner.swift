// Generated by Robert "r0ml" Lefkowitz <code@liberally.net> in 2024
// from a file with the following notice:

/*
   Copyright (c) 1980, 1993, 1994
    The Regents of the University of California.  All rights reserved.
  
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
   3. Neither the name of the University nor the names of its contributors
      may be used to endorse or promote products derived from this software
      without specific prior written permission.
  
   THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
   ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
   FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
   OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
   HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
   LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
   OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
   SUCH DAMAGE.
 */
import Foundation
import Shared
import SwiftUI

@main final class banner : ShellCommand {

  var usage : String = "Not yet implemented"
  let DWIDTH = 132
  let MAXMSG = 1024

  struct CommandOptions {
    var width : Int = 132
    var debug = false
    var trace = false
    var msg : String?
  }
  
  func parseOptions() throws(CmdErr) -> CommandOptions {
    var options = CommandOptions()
    let supportedFlags = "w:td"
    let go = BSDGetopt(supportedFlags)
    
    while let (k, v) = try go.getopt() {
      switch k {
        case "d":
          options.debug = true;
        case "t":
          options.trace = true;
        case "w":
          if let w = Int(v) {
            if (w > 0 || w <= DWIDTH) {
              options.width = w
              continue
            }
          }
          throw CmdErr(1, "illegal argument for -w option");
        case "?": throw CmdErr(1)
        default: throw CmdErr(1)
      }
    }
    let m = go.remaining
    if m.isEmpty {
      do {
        if let f = try FileHandle.standardInput.read(upToCount: MAXMSG) {
          var j = String(data: f, encoding: .utf8)
          if j?.last == "\n" { j = String(j!.dropLast() ) }
          options.msg = j
        }
      } catch(let e) {
        throw CmdErr(1, e.localizedDescription)
      }
    } else {
      options.msg = m.joined(separator: " ")
    }
    return options
  }
  
  func runCommand(_ options: CommandOptions) throws(CmdErr) {
    
    throw CmdErr(1, usage)
  }
  
  @MainActor func render(_ msg : String)  -> [ArraySlice<UInt8>]? {
    let renderer = ImageRenderer(content: Text(msg) )
    
    // make sure and use the correct display scale for this device
    //       renderer.scale = displayScale
    
    if let cgi = renderer.cgImage {
      
      return pixelValues(fromCGImage: cgi)
    }
    return nil
  }

  func pixelValues(fromCGImage imageRef: CGImage?) -> [ArraySlice<UInt8>]?
  {
      var width = 0
      var height = 0
      var pixelValues: [ArraySlice<UInt8>] = []
      if let imageRef = imageRef {
          width = imageRef.width
          height = imageRef.height
          let bitsPerComponent = imageRef.bitsPerComponent
          let bytesPerRow = imageRef.bytesPerRow
          let totalBytes = height * bytesPerRow

          let colorSpace = CGColorSpaceCreateDeviceGray()
          var intensities = [UInt8](repeating: 0, count: totalBytes)

          let contextRef = CGContext(data: &intensities, width: width, height: height, bitsPerComponent: bitsPerComponent, bytesPerRow: bytesPerRow, space: colorSpace, bitmapInfo: 0)
          contextRef?.draw(imageRef, in: CGRect(x: 0.0, y: 0.0, width: CGFloat(width), height: CGFloat(height)))

        
        for i in 0..<height {
          pixelValues.append(intensities[ (i*bytesPerRow)..<((i+1)*bytesPerRow) ] )
        }
        return pixelValues
      }
      return nil
  }

  func blackAndWhite(_ cg : CGImage) -> CGImage? {
    let currentCGImage = cg
    let currentCIImage = CIImage(cgImage: currentCGImage)

    let filter = CIFilter(name: "CIColorMonochrome")
    filter?.setValue(currentCIImage, forKey: "inputImage")

    // set a gray value for the tint color
    filter?.setValue(CIColor(red: 0.7, green: 0.7, blue: 0.7), forKey: "inputColor")

    filter?.setValue(1.0, forKey: "inputIntensity")
    guard let outputImage = filter?.outputImage else { return nil }

    let context = CIContext()

    let cgimg = context.createCGImage(outputImage, from: outputImage.extent)
    return cgimg
  }
}
