// Generated by Robert M. Lefkowitz <code@liberally.net> in 2024
// from a file containing the following notice:

/*
  Copyright (c) 2017 Fred Schlechter
  All rights reserved.
 
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.
 
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.
*/

import Testing
import TestSupport
import Foundation

@Suite(.serialized) class headTest {
  let ex = "head"

  @Test("Test head(1)'s handling of an empty file") func empty_file() async throws {
    let p = ShellProcess(ex)
    let (_, j, _) = try await p.run()
    #expect(j!.isEmpty)
  }

  @Test("Test head(1)'s default mode") func default_no_options() async throws {
    let i = Array(repeating: "test\n", count: 100).joined()
    let p = ShellProcess(ex)
    let (_, j, _) = try await p.run(i)
    #expect( j == Array(repeating: "test\n", count: 10).joined())
  }

  @Test("Test head(1)'s -n option") func line_count() async throws {
    let i = Array(repeating: "test\n", count: 100).joined()
    let p = ShellProcess(ex, "-n", "50")
    let (_, j, _) = try await p.run(i)
    #expect( j!.split(separator: "\n", omittingEmptySubsequences: true).count == 50)
  }

  @Test("Test head(1)'s -c option") func byte_count() async throws {
    let i = Array(repeating: "test\n", count: 100).joined()
    let p = ShellProcess(ex, "-c", "50")
    let (_, j, _) = try await p.run(i)
    #expect( j!.count == 50)
  }

  @Test("Test head(1)'s handling of a sparse file with text at the beginning of the file", .disabled("the tests all read from stdin instead of from files, so the sparse file test needs different setup") ) func sparse_file_text_at_beginning() async throws {
    let p = ShellProcess(ex)
    let (_, j, _) = try await p.run()
      // Not yet implemented.
    #expect(false)
  }

  @Test("Test head(1)'s handling of a sparse file with text at the end of the file", .disabled("the tests all read from stdin instead of from files, so the sparse file test needs different setup")) func spare_file_text_at_end() async throws {
    let p = ShellProcess(ex)
    let (_, j, _) = try await p.run()
      // Not yet implemented.
    #expect(false)
  }

  @Test("Test head(1)'s handling of a missing line count arg") func missing_line_count() async throws {
    let p = ShellProcess(ex, "-n")
    let (r, j, e) = try await p.run()
    let ee = "head: option requires an argument -- n\nusage: head [-n lines | -c bytes] [file ...]\n"
    #expect(r != 0)
    #expect(e == ee)
  }

  @Test("Test head(1)'s handling of an invalid line count arg") func invalid_line_count() async throws {
    let p = ShellProcess(ex, "-n", "-10")
    let (r, j, e) = try await p.run()
    let ee = "head: illegal line count -- -10\n"
    #expect(r != 0)
    #expect(e == ee )
  }

  @Test("Test head(1)'s reading of stdin", .disabled("all of the tests read from stdin instead of creating temp files, so this test is no longer necessary")) func read_from_stdin() async throws {
    #expect(Bool(false))
  }


}
