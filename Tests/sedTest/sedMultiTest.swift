
// Generated by Robert "r0ml" Lefkowitz <code@liberally.net> in 2024
// from a file containing the following notice:

/*
  Copyright (c) 1992 Diomidis Spinellis.
  Copyright (c) 1992, 1993
        The Regents of the University of California.  All rights reserved.
 
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.
  3. Neither the name of the University nor the names of its contributors
     may be used to endorse or promote products derived from this software
     without specific prior written permission.
 
  THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED.  IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.
 */

import ShellTesting

@Suite("sed multi_test", .serialized) class sedMultiTest : ShellTest {
  let cmd = "sed"
  let suiteBundle = "text_cmds_sedTest"
  
  let lines1 = ((1...14).map { "l1_\($0)\n" })
  let lines2 = ((1...9).map { "l2_\($0)\n"})
  var flines1 : URL
  var flines2 : URL
  let script1 = "s/^/s1_/p"
  let script2 = "s/^/s2_/p"
  var fscript1 : URL
  var fscript2 : URL
  
  init() throws {
    flines1 = try tmpfile("lines1", lines1.joined())
    flines2 = try tmpfile("lines2", lines2.joined())
    fscript1 = try tmpfile("script1", script1)
    fscript2 = try tmpfile("script2", script2)
  }
  
  deinit {
    rm(flines1, flines2)
  }
  
  func check( _ p : ShellProcess, _ f : String, _ inp : Data) async throws {
    let res = try fileContents("\(f).out")
    let (r, j, e) = try await p.run(inp)
    #expect(r == 0, Comment(rawValue: e ?? ""))
    #expect(j! == res)
  }

  func check( _ p : ShellProcess, _ f : String, _ inp : String? = nil) async throws {
    let (r, j, e) = if let inp {
      try await p.run(inp)
    } else {
      try await p.run()
    }
    #expect(r == 0, Comment(rawValue: e ?? ""))
    let res = try fileContents("\(f).out" )
    #expect(j! == res)
  }
  
  @Test("Argument parsing - first type", arguments: [
    ("1.1", ["s/^/e1_/p"]),
    ("1.2", ["-n", "s/^/e1_/p"]),
  ]) func test_args_1(_ f : String, _ p : [String]) async throws {
    let res = try fileContents("multi.\(f).out")
    try await run(output: res, args: p + [ flines1 ] )
  }

  @Test("Argument parsing - first type", arguments: [
    ("1.3", ["s/^/e1_/p"]),
    ("1.4", ["-n", "s/^/e1_/p"]),
  ]) func test_args_1p(_ f : String, _ p : [String]) async throws {
    let res = try fileContents("multi.\(f).out")
    try await run(withStdin: lines1.joined(), output: res, args: p)
  }

  
  @Test("Argument parsing - second type (1.4)") func test_args_141() async throws {
    let res = try fileContents("multi.1.4.1.out")
    try await run(withStdin: lines1.joined(), output: res, args: "-e", "")
  }

  @Test("Argument parsing (1.5)") func test_args_15() async throws {
    let res = try fileContents("multi.1.5.out")
    try await run(output: res, args: "-f", fscript1, flines1)
  }

  @Test("Argument parsing (1.6)") func test_args_16() async throws {
    let res = try fileContents("multi.1.6.out")
    try await run(withStdin: lines1.joined(), output: res, args: "-f", fscript1)
  }

  @Test("Arguments parsing (1.7)") func test_args_17() async throws {
    let res = try fileContents("multi.1.7.out")
    try await run(output: res, args: "-e", "s/^/e1_/p",  flines1)
  }

  @Test("Argument parsing (1.8)") func test_args_18() async throws {
    let res = try fileContents("multi.1.8.out")
    try await run(withStdin: lines1.joined(), output: res, args: "-e", "s/^/e1_/p")
  }

  @Test("Argument parsing (1.9)") func test_args_19() async throws {
    let res = try fileContents("multi.1.9.out")
    try await run(output: res, args: "-n", "-f", fscript1, flines1)
  }

  @Test("Argument parsing (1.10)") func test_args_110() async throws {
    let res = try fileContents("multi.1.10.out")
    try await run(withStdin: lines1.joined(), output: res, args: "-n", "-f", fscript1)
  }

  @Test("Argument parsing (1.11)") func test_args_111() async throws {
    let res = try fileContents("multi.1.11.out")
    try await run(output: res, args: "-n", "-e", "s/^/e1_/p", flines1)
  }

  @Test("Argument parsing (1.12)") func test_args_112() async throws {
    let res = try fileContents("multi.1.12.out")
    try await run(withStdin: lines1.joined(), output: res, args: "-n", "-e", "s/^/e1_/p")
  }

  @Test("Argument parsing (1.13)") func test_args_113() async throws {
    let res = try fileContents("multi.1.13.out")
    try await run(output: res, args: "-e", "s/^/e1_/p", "-e", "s/^/e2_/p", flines1)
  }

  @Test("Argument parsing (1.14)") func test_args_114() async throws {
    let res = try fileContents("multi.1.14.out")
    try await run(output: res, args: "-f", fscript1, "-f", fscript2, flines1)
  }

  @Test("Argument parsing (1.15)") func test_args_115() async throws {
    let res = try fileContents("multi.1.15.out")
    try await run(output: res, args: "-e", "s/^/e1_/p", "-f", fscript1, flines1)

  }

  @Test("Argument parsing (1.16)") func test_args_116() async throws {
    let res = try fileContents("multi.1.16.out")
    try await run(output: res, args: "-e", "s/^/e1_/p", flines1, flines1)
  }

  @Test("Argument parsing (1.17)") func test_args_117() async throws {
    let res = try fileContents("multi.1.17.out")
    try await run(withStdin: lines1.joined(), output: res, args: "p", flines1)
  }

  @Test("Argument parsing (1.18)") func test_args_118() async throws {
    let fs1 = try tmpfile("script1", """
#n
# A comment

p
""")
    let res = try fileContents("multi.1.18.out")
    try await run(withStdin: lines1.joined(), output: res, args: "-f",  fs1, flines1)
  }

  
  @Test("Address ranges (2.1)") func test_addr_21() async throws {
    let res = try fileContents("multi.2.1.out")
    try await run(output: res, args: "-n", "-e", "4p", flines1)
  }
  
  @Test("Address ranges (2.2)") func test_addr_22() async throws {
    let res = try fileContents("multi.2.2.out")
    try await run(output: res, args: "-n", "-e", "20p", flines1, flines2)
  }
  
  @Test("Address ranges (2.3)") func test_addr_23() async throws {
    let res = try fileContents("multi.2.3.out")
    try await run(output: res, args: "-n", "-e", "$p", flines1)
  }
  
  @Test("Address ranges (2.4)") func test_addr_24() async throws {
    let res = try fileContents("multi.2.4.out")
    try await run(output: res, args: "-n", "-e", "$p", flines1, flines2)
  }
  
  @Test("Address ranges (2.5)") func test_addr_25() async throws {
    let res = try fileContents("multi.2.5.out")
    try await run(output: res, args: "-n", "-e", "$a\\\nhello", "/dev/null")
  }
  
  @Test("Address ranges (2.6)") func test_addr_26() async throws {
    let res = try fileContents("multi.2.6.out")
    try await run(output: res, args: "-n", "-e", "$p", flines1, "/dev/null", flines2)
  }
  
  @Test("Address ranges (2.7)") func test_addr_27() async throws {
    let res = try fileContents("multi.2.7.out")
    try await run(output: res, args: "-n", "-e", "20p", flines1)
  }
  
  @Test("Address ranges (2.8)") func test_addr_28() async throws {
    let res = try fileContents("multi.2.8.out")
    try await run(output: res, args: "-n", "-e", "/NOTFOUND/p", flines1)
  }
  
  @Test("Address ranges (2.9)") func test_addr_29() async throws {
    let res = try fileContents("multi.2.9.out")
    try await run(output: res, args: "-n", "/l1_7/p", flines1)
  }
  
  @Test("Address ranges (2.10)") func test_addr_210() async throws {
    let res = try fileContents("multi.2.10.out")
    try await run(output: res, args: "-n", " /l1_7/p", flines1)
  }
  
  @Test("Address ranges (2.11)") func test_addr_211() async throws {
    let res = try fileContents("multi.2.11.out")
    try await run(output: res, args: "-n", "\\_l1\\_7_p", flines1)
  }
  
  @Test("Address ranges (2.12)") func test_addr_212() async throws {
    let res = try fileContents("multi.2.12.out")
    try await run(output: res, args: "-n", "1,4p", flines1)
  }
  
  @Test("Address ranges (2.13)") func test_addr_213() async throws {
    let res = try fileContents("multi.2.13.out")
    try await run(output: res, args: "-n", "1,$p", flines1, flines2)
  }
  
  @Test("Address ranges (2.14)") func test_addr_214() async throws {
    let res = try fileContents("multi.2.14.out")
    try await run(output: res, args: "-n", "1,/l2_9/p", flines1, flines2)
  }
  
  @Test("Address ranges (2.15)") func test_addr_215() async throws {
    let res = try fileContents("multi.2.15.out")
    try await run(output: res, args: "-n", "/4/,$p", flines1, flines2)
  }
  
  @Test("Address ranges (2.16)") func test_addr_216() async throws {
    let res = try fileContents("multi.2.16.out")
    try await run(output: res, args: "-n", "/4/,20p", flines1, flines2)
  }
  
  @Test("Address ranges (2.17)") func test_addr_217() async throws {
    let res = try fileContents("multi.2.17.out")
    try await run(output: res, args: "-n", "/4/,/10/p", flines1, flines2)
  }
  
  @Test("Address ranges (2.18)") func test_addr_218() async throws {
    let res = try fileContents("multi.2.18.out")
    try await run(output: res, args: "-n", "/l2_3/,/l1_8/p", flines1, flines2)
  }
  
  @Test("Address ranges (2.19)") func test_addr_219() async throws {
    let res = try fileContents("multi.2.19.out")
    try await run(output: res, args: "-n", "12,3p", flines1, flines2)
  }
  
  @Test("Address ranges (2.20)") func test_addr_220() async throws {
    let res = try fileContents("multi.2.20.out")
    try await run(output: res, args: "-n", "/l1_7/,3p", flines1, flines2)
  }
  
  @Test("Address ranges (2.21)") func test_addr_221() async throws {
    let res = try fileContents("multi.2.21.out")
    try await run(output: res, args: "-n", "13,+4p", flines1, flines2)
  }
  
  @Test("Address ranges (2.22)") func test_addr_222() async throws {
    let res = try fileContents("multi.2.22.out")
    try await run(output: res, args: "-n", "/l1_6/,+2p", flines1, flines2)
  }
  
  @Test("Address ranges (2.23)") func test_addr_223() async throws {
    let res = try fileContents("multi.2.23.out")
    try await run(output: res, args: "-n", "12,+1p", flines1, flines2)
  }
  
  @Test("Branch and other grouping (3.1)") func test_group_31() async throws {
    let res = try fileContents("multi.3.1.out")
    try await run(output: res, args: "-e", """
4,12 {
  s/^/^/
  s/$/$/
  s/_/T/
}
""", flines1)
  }
  
  @Test("Branch and other grouping (3.2)") func test_group_32() async throws {
    let res = try fileContents("multi.3.2.out")
    try await run(output: res, args: "-e", """
4,12 {
  s/^/^/
  /6/,/10/ {
    s/$/$/
    /8/ s/_/T/
  }
}
""", flines1)
  }
  
  @Test("Branch and other grouping (3.3)") func test_group_33() async throws {
    let res = try fileContents("multi.3.3.out")
    try await run(output: res, args: "-e", """
4,12 !{
  s/^/^/
  /6/,/10/ !{
    s/$/$/
    /8/ !s/_/T/
  }
}
""", flines1)
  }
  
  @Test("Branch and other grouping (3.4)") func test_group_34() async throws {
    let res = try fileContents("multi.3.4.out")
    try await run(output: res, args: "-e", "4,12!s/^/^/", flines1)
  }
  
  @Test("Commands a c d and i (4.1)") func test_acid_41() async throws {
    let res = try fileContents("multi.4.1.out")
    try await run(output: res, args: "-n", "-e", """
s/^/before_i/p
20i\\
inserted
s/^/after_i/p
""", flines1, flines2)
  }
  
  @Test("Commands a c d and i (4.2)") func test_acid_42() async throws {
    let res = try fileContents("multi.4.2.out")
    try await run(output: res, args: "-n", "-e", """
5,12s/^/5-12/
s/^/before_a/p
/5-12/a\\
appended
s/^/after_a/p
""", flines1, flines2)
  }
  
  @Test("Commands a c d and i (4.3)") func test_acid_43() async throws {
    let res = try fileContents("multi.4.3.out")
    try await run(output: res, args: "-n", "-e", """
s/^/^/p
/l1_/a\\
appended
8,10N
s/$/$/p
""", flines1, flines2)
  }
  
  @Test("Commands a c d and i (4.4)") func test_acid_44() async throws {
    let res = try fileContents("multi.4.4.out")
    try await run(output: res, args: "-n", "-e", """
c\\
hello
""", flines1)
  }
  
  @Test("Commands a c d and i (4.5)") func test_acid_45() async throws {
    let res = try fileContents("multi.4.5.out")
    try await run(output: res, args: "-n", "-e", """
8c\\
hello
""", flines1)
  }
  
  @Test("Commands a c d and i (4.6)") func test_acid_46() async throws {
    let res = try fileContents("multi.4.6.out")
    try await run(output: res, args: "-n", "-e", """
3,14c\\
hello
""", flines1)
  }
  
  @Test("Commands a c d and i (4.7)") func test_acid_47() async throws {
    let res = try fileContents("multi.4.7.out")
    try await run(output: res, args: "-n", "-e", """
8,3c\\
hello
""", flines1)
  }
  
  @Test("Commands a c d and i (4.8)") func test_acid_48() async throws {
    let res = try fileContents("multi.4.8.out")
    try await run(withStdin: lines1.joined(), output: res, args: "d")
  }
  

  @Test("Labels and branching (5.1)") func test_branch_51() async throws {
    let res = try fileContents("multi.5.1.out")
    try await run(output: res, args: "-n", "-e", """
b label4
:label3
s/^/label3_/p
b end
:label4
2,12b label1
b label2
:label1
s/^/label1_/p
b
:label2
s/^/label2_/p
b label3
:end
""", flines1)
  }
  
  @Test("Labels and branching (5.2)") func test_branch_52() async throws {
    let res = try fileContents("multi.5.2.out")
    try await run(output: res, args: "-n", "-e", """
s/l1_/l2_/
t ok
b
:ok
s/^/tested /p
""", flines1, flines2)
  }
  
  @Test("Labels and branching (5.3)") func test_branch_53() async throws {
    let res = try fileContents("multi.5.3.out")
    try await(output: res, args: "-n", "-e", """
5,8b inside
1,5 {
  s/^/^/p
  :inside
  s/$/$/p
}
""", flines1)
  }
  
  @Test("Labels and branching (5.4)") func test_branch_54() async throws {
    let res = try fileContents("multi.5.4.out")
    try await run(output: res, args: "-n", "-e", """
1,8s/^/^/
t l1
:l1
t l2
s/$/$/p
b
:l2
s/^/ERROR/
""", flines1)
  }
  
  @Test("Labels and branching (5.5)") func test_branch_55() async throws {
    let res = try fileContents("multi.5.5.out")
    try await run(output: res, args: "-n", "-e", """
t l2
1,8s/^/^/p
2,7N
b
:l2
s/^/ERROR/p
""", flines1)
  }
  
  @Test("Labels and branching (5.6)") func test_branch_56() async throws {
    let res = try fileContents("multi.5.6.out")
    try await run(output: res, args: "5q", flines1)
  }
  
  @Test("Labels and branching (5.7)") func test_branch_57() async throws {
    let res = try fileContents("multi.5.7.out")
    try await run(output: res, args: "-e", """
5i\\
hello
5q
""", flines1)
  }
  
  @Test("Labels and branching (5.8)") func test_branch_58() async throws {
    let res = try fileContents("multi.5.8.out")
    try await run(output: res, args: "-e", """
{
:b
}
s/l/m/
tb
""", flines1)
  }
  

  @Test("Pattern space commands (6.1)") func test_pattern_61() async throws {
    let res = try fileContents("multi.6.1.out")
    try await run(output: res, args: "-n", "-e", """
c\\
changed
p
""", flines1)
  }
        
  @Test("Pattern space commands (6.2)") func test_pattern_62() async throws {
    let res = try fileContents("multi.6.2.out")
    try await run(output: res, args: "-n", "-e", """
4d
p
""", flines1)
  }
        
  @Test("Pattern space commands (6.3)") func test_pattern_63() async throws {
    let res = try fileContents("multi.6.3.out")
    try await run(output: res, args: "-e", "N;N;N;D", flines1)
  }
        
  @Test("Pattern space commands (6.4)") func test_pattern_64() async throws {
    let res = try fileContents("multi.6.4.out")
    try await run(output: res, args: "-e", """
2h
3H
4g
5G
6x
6p
6x
6p
""", flines1)
  }
        
  @Test("Pattern space commands (6.5)") func test_pattern_65() async throws {
    let res = try fileContents("multi.6.5.out")
    try await run(output: res, args: "-e", "4n", flines1)
  }
        
  @Test("Pattern space commands (6.6)") func test_pattern_66() async throws {
    let res = try fileContents("multi.6.6.out")
    try await run( output: res, args: "-n", "-e", "4n", flines1)
  }
        
  @Test("Print and file routines (7.1)") func test_print_71() async throws {
    let res = try ShellProcess.fileData(suiteBundle, "multi.7.1.out")
    var lines3 = Data(repeating: 0, count: 257)
    for i in 1..<256 { lines3[i-1] = UInt8(i) }
    lines3[255] = 10
    lines3[256] = 10
    let lf = try tmpfile("lines3", lines3)
    try await run(withStdin: lines3, output:res, args: "-n", "l", env: ["LC_ALL":"C"])
    try await run(output:res, args: "-n", "l", lf, env: ["LC_ALL":"C"])
    rm(lf)
  }
  
  @Test("Print and file routines (7.2)") func test_print_72() async throws {
    let res = try fileContents("multi.7.2.out")
    try await run(output: res, args: "-e", "/l2_/=", flines1, flines2)
  }
  
  @Test("Print and file routines (7.3)") func test_print_73() async throws {
    let res = try fileContents("multi.7.3.out")
    let (r, j, _) = try await ShellProcess(cmd, "-e", "3,12w lines4", flines1).run()
    #expect(r == 0)
    let k = try String(contentsOf: URL(fileURLWithPath: "lines4", relativeTo: FileManager.default.temporaryDirectory), encoding: .utf8)
    #expect(j! + k == res)
  }
  
  @Test("Print and file routines (7.4)") func test_print_74() async throws {
    let res = try fileContents("multi.7.4.out")
    try await run(output: res, args: "-e", "4r lines2", flines1)
  }
  
  @Test("Print and file routines (7.5)") func test_print_75() async throws {
    let res = try fileContents("multi.7.5.out")
    try await run(output: res, args: "-e", "5r /dev/dds", flines1)
  }
  
  @Test("Print and file routines (7.6)") func test_print_76() async throws {
    let res = try fileContents("multi.7.6.out")
    try await run(output: res, args: "-e", "6r /dev/null", flines1)
  }
  
  @Test("Print and file routines (7.7)") func test_print_77() async throws {
    let res = try fileContents("multi.7.7.out")
    let d = URL(filePath: "/usr/share/dict/words")
    let wwo = try await d.lines.prefix(200).reduce(into: [String]()) { $0.append($1) }

    // FIXME: the original test failed because some dictionary entries are
    // duplicates if ignoring case, and the file system is not case sensitive.
    let ww = Set(wwo.map { $0.lowercased() })
    let p = ShellProcess(cmd, "s$.*$s/^/&/w tmpdir/&$")
    let (r, j, _) = try await p.run( (ww.map { $0+"\n" } ).joined() )
    #expect(r == 0)
    let tt = FileManager.default.temporaryDirectory.appending(path: "tmpdir", directoryHint: .isDirectory)
    rm(tt)
    try FileManager.default.createDirectory(at: tt, withIntermediateDirectories: true)

    let script1 = try tmpfile("script1", j!)
    let p2 = ShellProcess(cmd,  "-f", script1, flines1)
    let (r2, j2, _) = try await p2.run()
    #expect(r2 == 0)
    let kk = try FileManager.default.contentsOfDirectory(at: tt, includingPropertiesForKeys: nil)
    #expect( kk.count == ww.count)
    
//  FIXME: the stored result file 7.7 depends on the contents of
//      /usr/share/dict/words -- which varies across versions
//    let res = try fileContents("sedTest", "7.7", withExtension: "out" )
//    let jj = (try kk.map { try String(contentsOf: $0, encoding: .utf8) }).joined()
//    #expect(jj == res)

    rm(tt)
    rm(script1)
  }
  
  @Test("Print and file routines (7.8)") func test_print_78() async throws {
    let res = try fileContents("multi.7.8.out")
    let flines3 = try tmpfile("lines3", lines1.joined()+"\n")
    try await run(output: res, args: "-n", "-e", "$p", flines3, "/dev/null")
    rm(flines3)
  }

  @Test("Substitution commands (8.1-8.10)",
        arguments: [
          ("8.1", "s/./X/g"),
          ("8.2", "s,.,X,g"),
          ("8.3", "s.\\..X.g"),
          ("8.4", "s/[\\/]/Q/"),
          ("8.5", "s_\\__X_"),
          ("8.6", "s/./(&)/g"),
          ("8.7", "s/./(\\&)/g"),
          ("8.8", "s/\\(.\\)\\(.\\)\\(.\\)/x\\3x\\2x\\1/g"),
          ("8.9", "s/_/u0\\\nu1\\\nu2/g"),
          ("8.10", "s/./X/4"),
          ("8.12", "s/[123]/X/g"),
          ("8.13", "y/0123456789/9876543210/"),
          ("8.14", "y10\\123456789198765432\\101"),
          ("8.15", "1N;2y/\\n/X/"),
          ("8.17", "s/[/]/Q/"),
          ("8.18", "s[_[X[")
        ]) func test_subst_81(_ f : String, _ s : String) async throws {
          let res = try fileContents("multi.\(f).out")
          try await run(output: res, args: "-e", s, flines1)
  }
  
  @Test("Substitution command (8.11)") func test_subst_811() async throws {
    let l4 = URL(fileURLWithPath: "lines4", relativeTo: FileManager.default.temporaryDirectory)
    rm(l4)
    let p = ShellProcess(cmd, "-e", "s/1/X/w lines4", flines1)
    let (r, j, e) = try await p.run()
    #expect(r == 0)
    let res = try fileContents("multi.8.11.out" )
    let jj = try String(contentsOf: l4, encoding: .utf8)
    #expect(j! + jj == res)
  }
  
  @Test("Substitution command (8.16)") func test_subst_816() async throws {
    let res = try fileContents("multi.8.16.out")
    try await run(withStdin: "eeefff\n", output: res, args: "-e", """
    p
    s/e/X/p
    :x
    s//Y/p 
    # Establish limit counter in the hold space
    # GNU sed version 3.02 enters into an infinite loop here
    x 
    /.\\{10\\}/ {
      s/.*/ERROR/
      b
    }
    s/.*/&./
    x 
    /f/bx
""")
  }
  
  @Test("Substitution command (8.19)") func test_subst_819() async throws {
    let res = try fileContents("multi.8.19.out")
    let p = ShellProcess(cmd, "-e", "s/l/[/", flines1)
    let (r, j, _) = try await p.run()
    #expect(r == 0)
    try await run(withStdin: j!, output: res, args: "-e", "s[\\[.[X[")
  }
  
  @Test("Substitution command (8.20)") func test_subst_820() async throws {
    let res = try fileContents("multi.8.20.out")
    let p = ShellProcess(cmd, "-e", "s/l/[/", flines1)
    let (r, j, _) = try await p.run()
    #expect(r == 0)
    try await run(withStdin: j!, output: res, args: "-e", "s[\\[.[X\\[[")
  }
  
  @Test("Substitution command (8.21)") func test_subst_821() async throws {
    let res = try fileContents("multi.8.21.out")
    try await run(withStdin: "a\\b(c\n", output: res, args: "y%ABCDEFGHIJKLMNOPQRSTUVWXYZ, /\\\\()\"%abcdefghijklmnopqrstuvwxyz,------%")
  }

  @Test("Substitution command (8.22)",
        .disabled("this test fails in macOS 15.1")) func test_subst_822() async throws {
          let res = try fileContents("multi.8.22.out")
          try await run(output: res, args: "-n", "1{;N;s/[\\n]/X/;p;}")
  }

  @Test("Substitution command (8.23)") func test_subst_823() async throws {
    let res = try fileContents("multi.8.23.out")
    try await run(withStdin: "1\n2\n", output: res, args: "-n", "1{;N;s/\\n/X/;p;}")
  }

  @Test("Error cases", arguments: [
    "-x", "-f", "-e", "{", "}", "/hello/", "1,/hello/", "/jj", "a hello",
    "a \\ hello", "b foo", "d hello", "s/aa", "s/a/b", "s/a/b/c/d",
    "s/a/b/1 2", "s/a/b/ 1 g", "s/a/b/w", "y/aa", "y/aa/b/",
    "y/aa/", "y/a/b", "y/a/b/c/d", "!",
    "supercalifrangolisticexprialidociussupercalifrangolisticexcius",
  ]) func test_error(_ s : String) async throws {
    try await run(status: 1, args: s)
  }
  
  @Test("Error cases 2", arguments: [
    ["-f", "/dev/xyzzyxyzy"],
    ["p",  "/dev/xyzzyxyzy"],
    ["-f", "/bin/sh"],
    ["-e", "-5p"],
//    ["", "/dev/null"], // this succeeds on macOS 15.1
  ]) func test_error(_ s : [String]) async throws {
    try await run(status: 1, args: s as [Arguable],
                  env: ["LC_CTYPE" : "C"] )
  }

}
