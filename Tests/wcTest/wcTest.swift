// Generated by Robert "r0ml" Lefkowitz <code@liberally.net> in 2024
// from a file containing the following notice:

/*
  Copyright (c) 2023 Klara, Inc.

  SPDX-License-Identifier: BSD-2-Clause
*/

import ShellTesting

@Suite(.serialized) class wcTest : ShellTest {
  let tv="""
Der bode en underlig grÃ¥sprÃ¦ngt en
pÃ¥ den yderste nÃ¸gne Ã¸; â€“
han gjorde visst intet menneske mÃ©n
hverken pÃ¥ land eller sjÃ¸;
dog stundom gnistred hans Ã¸jne stygt, â€“
helst mod uroligt vejr, â€“
og da mente folk, at han var forrykt,
og da var der fÃ¥, som uden frykt
kom Terje Vigen nÃ¦r.

"""

  let tvl=10
  let tvw=55
  let tvc=300
  let tvm=283
  let tvcL=42
  let tvmL=39

  let cmd = "wc"
  let suite = "text_cmds_wcTest"

  func check(_ i : String, _ a : Int, _ b : Int, _ c : Int, _ d : Int? = nil) async throws {
    let p1 = ShellProcess(cmd)
    let (_, o, _) = try await p1.run(i)
    let k = o!.matches(of: /^ +(\d+) +(\d+) +(\d+)\n$/)
    #expect(k.count == 1 &&
            Int(k[0].output.1)! == a &&
            Int(k[0].output.2)! == b &&
            Int(k[0].output.3)! == c )

    let p2 = ShellProcess(cmd, "-l")
    let (_, o1, _) = try await p2.run(i)
    let k1 = o1!.matches(of: /^ +(\d+)\n$/)
    #expect(k1.count == 1 &&
            Int(k1[0].output.1)! == a )

    let p3 = ShellProcess(cmd, "-w")
    let (_, o2, _) = try await p3.run(i)
    let k2 = o2!.matches(of: /^ +(\d+)\n$/)
    #expect(k2.count == 1 &&
            Int(k2[0].output.1)! == b)

    let p4 = ShellProcess(cmd, "-c")
    let (_, o3, _) = try await p4.run(i)
    let k3 = o3!.matches(of: /^ +(\d+)\n$/)
    #expect(k3.count == 1 &&
            Int(k3[0].output.1)! == c, "\(c)")

/*
    let (_, o4, _) = try run(cl, ex, ["-m"], i)
    let k4 = o4!.matches(of: /^ +(\d)\n$/)
    #expect(k4.count == 1 &&
           Int(k4[0].output.1)! == d ?? c)
 */
  }
  
  @Test("Basic test case") func basic() async throws {
    try await check("a b\n", 1, 2, 4)
}

  @Test("Input containing only blank lines") func blank() async throws {
    try await check("\n\n\n", 3, 0, 3)
  }

  @Test("Empty input") func empty() async throws {
    try await check("", 0, 0, 0)
  }

  @Test("Invalid multibye input") func invalid() async throws {
    let i = "a\u{ff}b\n".data(using: .isoLatin1)!
    
    let p = ShellProcess(cmd, "-m", env: ["LC_ALL":"UTF-8"])
    let (_, o, e) = try await p.run(i)
    let k = o!.matches(of: /^ +(\d+)\n$/)
    #expect(k.count == 1)
    
    if k.count == 1 {
      #expect(Int(k[0].output.1)! == 4)
    }
    #expect(e!.matches(of: /Illegal byte sequence/).count == 1)
  }

  @Test("Multiline, multibyte input") func multiline() async throws {
    try await check(tv+"\n", tvl, tvw, tvc, tvm)
  }

  @Test("Multiline input exceeding the input buffer size") func multiline_repeated() async throws {
    let c = 1000
    let tvx = Array(repeating: tv+"\n", count: c).joined()
    try await check(tvx, tvl * c, tvw * c, tvc * c, tvm * c)
  }

  @Test("Input containing NUL") func nul() async throws {
    try await check("a\0b\n", 1, 1, 4)
  }

  @Test("Multibyte sequence across buffer boundary") func poop() async throws {
    let p = "ðŸ’©.ðŸ’©.ðŸ’©.ðŸ’©.ðŸ’©.ðŸ’©.ðŸ’©.ðŸ’©.ðŸ’©.ðŸ’©.ðŸ’©.ðŸ’©.ðŸ’©.ðŸ’©.ðŸ’©.ðŸ’©\n"
    let MAXBSIZE=1048576
    let c = MAXBSIZE / p.count
    let foo = Array(repeating: p, count: c).joined()
    try await check(foo, c, c, c * 80, c * 32 )
  }

  @Test func total() async throws {
    let f = try tmpfile("foo", tv+"\n")
    let f2 = try tmpfile("bar", tv+"\n")

    defer {
      rm(f, f2)
    }
    
    let p = ShellProcess(cmd, f, f2)
    let (_, j, _) = try await p.run()
    let ll = j!.split(separator: "\n", omittingEmptySubsequences: true).last
    
    // More than one line of output
    #expect(ll != nil)
    
    if let ll {
      let k = ll.matches(of: /^\s+(\d+)\s+(\d+)\s+(\d+)\s+total$/)
      
      try #require(!k.isEmpty)
      #expect( Int((k.first!.output.1))! == 2 * tvl )
      #expect( Int(k.first!.output.2)! == 2 * tvw )
      #expect( Int(k.first!.output.3)! == 2 * tvc )
    }
  }

  @Test("Input not ending in newline") func unterminated() async throws {
    try await check("a b", 0, 2, 3)
  }

  @Test("Trigger usage message") func usage() async throws {
    let p = ShellProcess(cmd, "-?")
    let (r, j, e) = try await p.run()
    #expect(r == 1)
    #expect( e!.split(separator: "\n", omittingEmptySubsequences: true).map { $0.hasPrefix("usage:") }.contains(true) )
  }

  @Test("Input containing only whitespace and newlines") func whitespace() async throws {
    try await check("\n \n\t\n", 3, 0, 5)
  }

}
