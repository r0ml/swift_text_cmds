
// Generated by Robert "r0ml" Lefkowitz <code@liberally.net> in 2024
// from a file containing the following notice:

/*
  Copyright (c) 2022-2023 Klara Systems
 
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.
 
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.
 */

import ShellTesting

@Suite(.serialized) class splitTest {
  let ex = "split"
  let MAXBSIZE = 256 * 4096
  
  func deleteTempFiles(_ a : [String]) {
    a.forEach {
      try? FileManager.default.removeItem(at: FileManager.default.temporaryDirectory.appendingPathComponent($0))
    }
  }
  
  @Test func bytes1() async throws {
    let p = ShellProcess(ex, "-b", "4", "-", "split-")
    let (r, _, _) = try await p.run("aaaabb\ncccc\n")
    #expect( r == 0 )
    let o1 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-aa"), encoding: .utf8   )
    let o2 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-ab"), encoding: .utf8   )
    let o3 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-ac"), encoding: .utf8   )
    #expect( "aaaa" == o1 )
    #expect( "bb\nc" == o2 )
    #expect( "ccc\n" == o3 )
    
    deleteTempFiles(["split-aa", "split-ab", "split-ac"])
  }
  
  @Test func bytes2() async throws {
    let pieces = [
      String(repeating: "a", count: MAXBSIZE+12),
      String(repeating: "b", count: MAXBSIZE+12),
      String(repeating: "c", count: 12),
      ]
    
    let p2 = ShellProcess(ex, "-b", String(MAXBSIZE+12), "-", "split-")
    let (r2, _, _) = try await p2.run( pieces.joined() )
    #expect( r2 == 0 )
    let o4 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-aa"), encoding: .utf8   )
    let o5 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-ab"), encoding: .utf8   )
   let o6 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-ac"), encoding: .utf8   )
    #expect( pieces[0] == o4 )
    #expect( pieces[1] == o5 )
    #expect( pieces[2] == o6 )
    deleteTempFiles(["split-aa", "split-ab", "split-ac"])

  }

  @Test func chunks() async throws {
    let i = String(repeating: "a", count: 4096) +
    String(repeating: "b", count: 4096) +
    String(repeating: "c", count: 4104)
    
    // The -n option can't work on stdin, so I need a file input
    let i1 = FileManager.default.temporaryDirectory.appending(path: "foo", directoryHint: .notDirectory)
    try i.write(to: i1, atomically: true, encoding: .utf8)
    let p = ShellProcess(ex, "-n", "3", i1.relativePath, "split-")
    
    let (r, _, _) = try await p.run(i)
    #expect( r == 0 )
    
    let o1 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-aa"), encoding: .utf8   )
    let o2 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-ab"), encoding: .utf8   )
   let o3 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-ac"), encoding: .utf8   )
    #expect( o1 == String(repeating: "a", count: 4096) + String(repeating: "b", count: 2))
    #expect( o2  == String(repeating: "b", count: 4094) + String(repeating: "c", count: 4))
    #expect( o3  == String(repeating: "c", count: 4100))
    
    deleteTempFiles(["foo", "split-aa", "split-ab", "split-ac"])
  }

  
  @Test func sensible_lines1() async throws {
    let pieces = [
      "The quick brown fox\n",
      "jumps over\n",
      "the lazy dog\n",
    ]
    
    let p = ShellProcess(ex, "-l", "1", "-", "split-")
    let (r, _, _) = try await p.run( pieces.joined() )
    #expect( r == 0 )
    let o1 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-aa"), encoding: .utf8   )
    let o2 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-ab"), encoding: .utf8   )
    let o3 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-ac"), encoding: .utf8   )
    #expect( pieces[0] == o1 )
    #expect( pieces[1] == o2 )
    #expect( pieces[2] == o3 )
    
    deleteTempFiles(["split-aa", "split-ab", "split-ac"])
  }
  
  @Test func sensible_lines2() async throws {
    let pieces = [
      "The quick brown fox\n",
      "jumps over\n",
      "the lazy dog\n",
    ]
    
    let p2 = ShellProcess(ex, "-l", "2", "-", "split-")
    let (r2, _, _) = try await p2.run( pieces.joined() )
    #expect( r2 == 0 )
    let o4 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-aa"), encoding: .utf8   )
    let o5 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-ab"), encoding: .utf8   )
    #expect( o4 == pieces[0]+pieces[1])
    #expect( o5 == pieces[2])
    deleteTempFiles(["split-aa", "split-ab"])
  }

  @Test func long_lines() async throws {
    let pieces = [
      String(repeating: "a", count: MAXBSIZE) + "\n",
      String(repeating: "b", count: MAXBSIZE) +
      String(repeating: "c", count: MAXBSIZE) + "\n",
      String(repeating: "d", count: 1024)+"\n"
    ]
    let p = ShellProcess(ex, "-l", "1", "-", "split-")
    let (r, _, _) = try await p.run( pieces.joined())
    #expect( r == 0 )
    let o1 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-aa"), encoding: .utf8   )
    let o2 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-ab"), encoding: .utf8   )
   let o3 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-ac"), encoding: .utf8   )
    #expect( pieces[0] == o1 )
    #expect( pieces[1] == o2 )
    #expect( pieces[2] == o3 )
    deleteTempFiles(["split-aa", "split-ab", "split-ac"])
  }

  @Test func numeric_suffix() async throws {
    let pieces = [
        "The quick brown fox\n",
        "jumps over\n",
        "the lazy dog\n",
        ]
    let p = ShellProcess(ex, "-d", "-l", "1", "-", "split-")
    let (r, _, _) = try await p.run( pieces.joined() )
    #expect( r == 0 )
    for i in 0..<pieces.count {
      let j = String(format: "%02d", i)
      let u = FileManager.default.temporaryDirectory.appendingPathComponent("split-\(j)")
      let o1 = try String(contentsOf: u, encoding: .utf8)
      #expect( o1 == pieces[i])
      try? FileManager.default.removeItem(at: u)
    }

  }

  @Test func larger_suffix_length() async throws {
    let pieces = (0...11).map { String(repeating: "a", count: $0)+"\n" }
    let p = ShellProcess(ex, "-a", "3", "-d", "-l", "1", "-", "split-")
    let (r, _, _) = try await p.run( pieces.joined() )
    #expect( r == 0 )
    
    for i in 0...11 {
      let j = String(format: "%03d", i)
      let u = FileManager.default.temporaryDirectory.appendingPathComponent("split-\(j)")
      let o1 = try String(contentsOf: u, encoding: .utf8)
      #expect( o1 == pieces[i] )
      try? FileManager.default.removeItem(at: u)
    }
  }

  @Test func pattern() async throws {
    let i1 = """
cat:
  aa: true
  ab: true
  ac: true

"""
    let i2 = """
dog:
  ba: true
  bb: true
  bc: true

"""
    
    let p = ShellProcess(ex, "-p", "^[^[:space:]]+:", "-", "split-")
    let (r, _, _) = try await p.run(i1+i2)
    #expect( r == 0 )
    let o1 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-aa"), encoding: .utf8   )
    let o2 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("split-ab"), encoding: .utf8   )
    #expect( i1 == o1 )
    #expect( i2 == o2 )
    deleteTempFiles(["split-aa", "split-ab"])
  }

  @Test func noautoextend() async throws {
    let m = 26*26
    let i = ((1...m).map { String($0)+"\n"}).joined()
    let p = ShellProcess(ex, "-a2", "-l1")
    let (r, _, _) = try await p.run(i)
    #expect( r == 0 )
    let o1 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("xzz"), encoding: .utf8   )
    #expect( (String(m)+"\n") == o1 )
    let az = "abcdefghijklmnopqrstuvwxyz"
    let a2z = az.flatMap {a in az.map {b in "x"+String(a)+String(b) }}
    deleteTempFiles(a2z)
  }

  @Test func continue_test() async throws {
    let i = "hello\n"
    let p = ShellProcess(ex)
    let (r, _, _) = try await p.run(i)
    #expect( r == 0 )
    let o1 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("xaa"), encoding: .utf8   )
    #expect( i == o1)
    
    let o2f = FileManager.default.temporaryDirectory.appendingPathComponent("xab")
    #expect( !FileManager.default.fileExists(atPath: o2f.path) )

    let p2 = ShellProcess(ex, "-c")
    let (r2, _, _) = try await p2.run(i)
    #expect( r2 == 0)
    let o2 = try String(contentsOf: o2f, encoding: .utf8)

    #expect( i == o2 )
    deleteTempFiles(["xaa", "xab"])
  }

  @Test func undocumented_kludge() async throws {
    let i = ((1...5000).map { String($0)+"\n" }).joined()
    let p = ShellProcess(ex, "-1000")
    let (r, _, _) = try await p.run(i)
    #expect( r == 0 )
    let o1 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("xae"), encoding: .utf8   )
    let i2 = ((4001...5000).map { String($0)+"\n" }).joined()
    #expect( i2 == o1 )
    
    deleteTempFiles(["xaa", "xab", "xac", "xad", "xae"])
    
    let p2 = ShellProcess(ex, "-d1000")
    let (r2, _, _) = try await p2.run(i)
    #expect( r2 == 0 )
    let o2 = try String(contentsOf: FileManager.default.temporaryDirectory.appendingPathComponent("x04"), encoding: .utf8   )
    #expect( i2 == o2)
    deleteTempFiles(["x00", "x01", "x02", "x03", "x04"])
  }

  @Test(arguments: [
    (-5, -5), (-15, -5), (-5, -15), (-15, -15)
  ]) func duplicate_linecount(_ x : Int, _ y : Int) async throws {
    let p = ShellProcess(ex, String(x), String(y), "/dev/null" )
    let (r, _, _) = try await p.run()
    #expect( r == 64 )
  }
  
}
