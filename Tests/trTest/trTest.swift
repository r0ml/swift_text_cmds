
// Generated by Robert "r0ml" Lefkowitz <code@liberally.net> in 2024
// from a file containing the following notice:

/*
   Copyright (c) 2013 The NetBSD Foundation, Inc.
   All rights reserved.
  
   This code is derived from software contributed to The NetBSD Foundation
   by David A. Holland.
  
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
  
   THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
   PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
   BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   POSSIBILITY OF SUCH DAMAGE.
 */

import Testing
import Foundation
import TestSupport

@Suite(.serialized) class trTest {

  let ex = "tr"

  @Test("Tests for tr -d", arguments: [
    ("x", "abcde"), ("c", "abde"), ("bd", "ace"),
    ("b-d", "ae"), ("ac-e", "b"), ("a-ce", "d")
  ]) func dopt(_ x : String, _ y : String) async throws {
    let p = ShellProcess(ex, "-d", x)
    let (_, j, _) = try await p.captureStdoutLaunch("abcde\n")
    #expect( j == y + "\n")
  }

  @Test("More tests for tr -d") func dopt2() async throws {
    let p = ShellProcess(ex, "-d", "b-df-h")
    let (_, j, _) = try await p.captureStdoutLaunch("abcdefghi\n")
    #expect( j == "aei\n")
    
    let p2 = ShellProcess(ex, "-c", "-d", "b-df-h")
    let (_, j2, _) = try await p2.captureStdoutLaunch("abcdefghi\n")
    #expect( j2 == "bcdfgh")
  }

  @Test("Even more tests for tr -d", arguments: [
    ("x", ""), ("c", "c"), ("bd", "bd"),
    ("b-d", "bcd"), ("ac-e", "acde"), ("a-ce", "abce")
  ]) func dopt3(_ x : String, _ y : String) async throws {
    let p = ShellProcess(ex, "-c", "-d", x)
    let (_, j, _) = try await p.captureStdoutLaunch("abcde\n")
    #expect( j == y)
  }

  @Test("Escape codes with tr -d") func dopt4() async throws {
    let p = ShellProcess(ex, "-d", "'\\n'")
    let (_, j, _) = try await p.captureStdoutLaunch("spl\nice")
    #expect( j == "splice")
    let p2 = ShellProcess(ex, "-d", "'\\012'")
    let (_, j2, _) = try await p2.captureStdoutLaunch("spl\nice")
    #expect( j2 == "splice")
    
    let p3 = ShellProcess(ex, "-d", "'\n'p")
    let (_, j3, _) = try await p3.captureStdoutLaunch("spl\nice")
    #expect( j3 == "slice")
    let p4 = ShellProcess(ex, "-d", "'\\012'p")
    let (_, j4, _) = try await p4.captureStdoutLaunch("spl\nice")
    #expect( j4 == "slice")
  }
  
  @Test("=x= with tr -d") func dopt5() async throws {
    let p = ShellProcess(ex, "-d", "[=c=]")
    let (_, j, _) = try await p.captureStdoutLaunch("abcde\n")
    #expect( j == "abde\n")
    
    let p2 = ShellProcess(ex, "-d", "'[=c=]'a")
    let (_, j2, _) = try await p2.captureStdoutLaunch("abcde\n")
    #expect( j2 == "bde\n")
  }

  @Test("make sure 0 works with tr -d") func dopt6() async throws {
    let p = ShellProcess(ex, "-d", "'\\0'")
    let (_, j, _) = try await p.captureStdoutLaunch("a\0\0\0b\n")
    #expect( j == "ab\n")
  }

  @Test("test posix classes with tr -d", .serialized, arguments: [
    ("'[:alnum:]'", "aAzZ.123\n", ".\n"),
    ("'[:alpha:]'", "aAzZ.123\n", ".123\n"),
    ("'[:blank:]'", "a z\n", "az\n"),
    ("'[:cntrl:]'", "a\nz\n", "az"),
    ("'[:digit:]'", "aAzZ.123\n", "aAzZ.\n"),
    ("'[:graph:]'", "a z.123\n", " \n"),
    ("'[:lower:]'", "aAzZ.123\n", "AZ.123\n"),
    ("'[:print:]'", "aAzZ.123\n", "\n"),
    ("'[:punct:]'", "aAzZ.12\n", "aAzZ12\n"),
    ("'[:space:]'", "a z\n", "az"),
    ("'[:upper:]'", "aAzZ.123\n", "az.123\n"),
    ("'[:xdigit:]'", "aAzZ.123\n", "zZ.\n")
  ]) func dopt7(_ x : String, _ y : String, _ z : String) async throws {
    let p = ShellProcess(ex, "-d", x)
    let (_, j, _) = try await p.captureStdoutLaunch(y)
    #expect( j == z)
  }

  
  @Test("Tests for tr -s", .serialized, arguments: [
    ("x", "abcde", "abcde"),
    ("c", "abcde", "abcde"),
    ("c", "abcccde", "abcde"),
    ("bd", "abbbcddde", "abcde"),
    ("b-d", "abbbcccddde", "abcde"),
    ("c", "acac", "acac"),
    ("c", "accacc", "acac"),
  ]) func sopt(_ x : String, _ y : String, _ z : String) async throws {
    let p = ShellProcess(ex, "-s", x)
    let (_, j, _) = try await p.captureStdoutLaunch(y)
    #expect(j == z)
  }
  
  @Test("Tests for tr -c -s", .serialized, arguments: [
    ("x", "abcde", "abcde"),
    ("c", "abcde", "abcde"),
    ("c", "abcccde", "abcccde"),
    ("bd", "abbbcddde", "abbbcddde"),
    ("b-d", "abbbcccddde", "abbbcccddde"),
    ("b-d", "aaabcccde", "abcccde"),
  ]) func sopt2(_ x : String, _ y : String, _ z : String) async throws {
    let p = ShellProcess(ex, "-c", "-s", x)
    let (_, j, _) = try await p.captureStdoutLaunch(y)
    #expect(j == z)
  }
  


  @Test("Tests for ts -ds", .serialized, arguments: [
    ("x", "y", "abcde", "abcde"),
    ("c", "x", "abcde", "abde"),
    ("x", "c", "abcde", "abcde"),
    ("c", "c", "abcde", "abde"),
    ("c", "x", "abcccde", "abde"),
    ("x", "c", "abcccde", "abcde"),
    ("c", "c", "abcccde", "abde"),
  ]) func dsopt(_ x : String, _ y : String, _ z : String, _ r : String) async throws {
    let p = ShellProcess(ex, "-ds", x, y)
    let (_, j, _) = try await p.captureStdoutLaunch(z)
    #expect( j == r)
  }
  
  @Test("Tests for ts -c -ds", .serialized, arguments: [
    ("x", "y", "abcde", ""),
    ("c", "x", "abcde", "c"),
    ("x", "c", "abcde", ""),
    ("c", "c", "abcde", "c"),
    ("c", "x", "abcccde", "ccc"),
    ("x", "c", "abcccde", ""),
    ("c", "c", "abcccde", "c"),
  ]) func dsopt2(_ x : String, _ y : String, _ z : String, _ r : String) async throws {
    let p = ShellProcess(ex, "-c", "-ds", x, y)
    let (_, j, _) = try await p.captureStdoutLaunch(z)
    #expect( j == r)
  }
  

  @Test("Tests for substitution", .serialized, arguments: [
    ("a-c", "a-c", "abcde", "abcde"),
    ("a-c", "cba", "abcde", "cbade"),
    ("a-z", "a-z", "abcde", "abcde"),
    ("a-z", "b-za", "abcde", "bcdef"),
    ("b-za", "a-z", "abcde", "zabcd"),
    ("a", "b", "ababa", "bbbbb"),
    ("a-z", "n-za-m", "sheesh", "furrfu"),
    ("n-za-m", "a-z", "sheesh", "furrfu"),
    ("a-z", "A-Z", "abcde", "ABCDE"),
    ("'[:lower:]'", "'[:upper:]'", "abc", "ABC"),
    ("a-z", "bozo", "abcde", "bozoo"),
    ("a-z", "qa", "abcde", "qaaaa"),
  ]) func subst(_ x : String, _ y : String, _ z : String, _ r : String) async throws {
    let p = ShellProcess(ex, x, y)
    let (_, j, _) = try await p.captureStdoutLaunch(z)
    #expect( j == r)
  }

  @Test("You can use -s with substitution", arguments: [
    ("a-c", "cba", "abcde", "cbade"),
    ("a-c", "cba", "aabbccddee", "cbaddee"),
  ])
  func subst2(_ x : String, _ y : String, _ z : String, _ r : String) async throws {
    let p = ShellProcess(ex, "-s", x, y)
    let (_, j, _) = try await p.captureStdoutLaunch(z)
   #expect( j == r)
 }
  
  @Test("Tests for tr substitution with -c") func csubst() async throws {
    let p = ShellProcess(ex, "-c", "'\\0-ac-\\377'", "b")
    let (_, j, _) = try await p.captureStdoutLaunch("abcde\n")
    #expect(j == "abcde\n")

    let p2 = ShellProcess(ex, "-c", "'\\0-ad-\\377'", "bc")
    let (_, j2, _) = try await p2.captureStdoutLaunch("abcde\n")
    #expect(j2 == "abcde\n")

    let p3 = ShellProcess(ex, "-c", "'\\0-@'", "QUACK")
    let (_, j3, _) = try await p3.captureStdoutLaunch("ABCDE\n")
    #expect(j3 == "QUACK\n")
  }
  
  @Test("Legacy tests") func legacy() async throws {
    let p = ShellProcess(ex, "abcde", "12345")
    let i = getFile("trTest", "regress", withExtension: "in" )!
    let i2 = getFile("trTest", "regress2", withExtension: "in" )!
    
    let (_, j1, _) = try await p.captureStdoutLaunch(i)
    #expect( j1 == getFile("trTest", "regress.00", withExtension: "out"))

    let p2 = ShellProcess(ex, "12345", "abcde")
    let (_, j2, _) = try await p2.captureStdoutLaunch(i)
    #expect( j2 == getFile("trTest", "regress.01", withExtension: "out"))

    let p3 = ShellProcess(ex, "-d", "aceg")
    let (_, j3, _) = try await p3.captureStdoutLaunch(i)
    #expect( j3 == getFile("trTest", "regress.02", withExtension: "out"))

    let p4 = ShellProcess(ex, "[[:lower:]]", "[[:upper:]]" )
    let (_, j4, _) = try await p4.captureStdoutLaunch(i)
    #expect( j4 == getFile("trTest", "regress.03", withExtension: "out"))

    let p5 = ShellProcess(ex, "[[:alpha:]]", ".")
    let (_, j5, _) = try await p5.captureStdoutLaunch(i)
    #expect( j5 == getFile("trTest", "regress.04", withExtension: "out"))

//    let (_, j6, _) = try captureStdoutLaunch(cl, ex, ["abcde", "12345"], i)
//    #expect( j6 == getFile("trTest", "regress.05", withExtension: "out"))

    let p7 = ShellProcess(ex, "[[:digit:]]", "?")
    let (_, j7, _) = try await p7.captureStdoutLaunch(i2)
    #expect( j7 == getFile("trTest", "regress.06", withExtension: "out"))

    let p8 = ShellProcess(ex, "[[:alnum:]]", "#")
    let (_, j8, _) = try await p8.captureStdoutLaunch(i2)
    #expect( j8 == getFile("trTest", "regress.07", withExtension: "out"))

//    let (_, j9, _) = try captureStdoutLaunch(cl, ex, ["abcde", "12345"], i)
//    #expect( j9 == getFile("trTest", "regress.08", withExtension: "out"))

    let pa = ShellProcess(ex, "\\014\\r", "?#")
    let (_, ja, _) = try await pa.captureStdoutLaunch("\u{0c}\r\n")
    #expect( ja == getFile("trTest", "regress.09", withExtension: "out"))

    let pb = ShellProcess(ex, "x[[:xdigit:]]", "?\\$" )
    let (_, jb, _) = try await pb.captureStdoutLaunch("0xdeadbeef")
    #expect( (jb!+"\n") == getFile("trTest", "regress.0a", withExtension: "out"))

    let pc = ShellProcess(ex, "-cd", "[[:xdigit:]]")
    let (_, jc, _) = try await pc.captureStdoutLaunch(i2)
    #expect( (jc!+"\n") == getFile("trTest", "regress.0b", withExtension: "out"))

    let pd = ShellProcess(ex, "-d", "[=]=]" )
    let (_, jd, _) = try await pd.captureStdoutLaunch("[[[[]]]]]\n")
    #expect( jd == getFile("trTest", "regress.0c", withExtension: "out"))

    let pe = ShellProcess(ex, "-d", "[=]" )
    let (_, je, _) = try await pe.captureStdoutLaunch( "]=[\n")
    #expect( je == getFile("trTest", "regress.0d", withExtension: "out"))


  }
}
