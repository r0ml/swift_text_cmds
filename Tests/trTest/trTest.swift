
// Generated by Robert "r0ml" Lefkowitz <code@liberally.net> in 2024
// from a file containing the following notice:

/*
   Copyright (c) 2013 The NetBSD Foundation, Inc.
   All rights reserved.
  
   This code is derived from software contributed to The NetBSD Foundation
   by David A. Holland.
  
   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions
   are met:
   1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
   2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
  
   THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
   ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
   TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
   PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
   BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   POSSIBILITY OF SUCH DAMAGE.
 */

import ShellTesting

@Suite(.serialized) class trTest : ShellTest {

  let cmd = "tr"
  let suiteBundle = "text_cmds_trTest"

  @Test("Tests for tr -d", arguments: [
    ("x", "abcde"), ("c", "abde"), ("bd", "ace"),
    ("b-d", "ae"), ("ac-e", "b"), ("a-ce", "d")
  ]) func dopt(_ x : String, _ y : String) async throws {
    try await run(withStdin: "abcde\n", output: y+"\n", args: "-d", x)
  }

  @Test("More tests for tr -d") func dopt2() async throws {
    try await run(withStdin: "abcdefghi\n", output: "aei\n", args: "-d", "b-df-h")

    try await run(withStdin: "abcdefghi\n", output: "bcdfgh", args: "-c", "-d", "b-df-h")
  }

  @Test("Even more tests for tr -d", arguments: [
    ("x", ""), ("c", "c"), ("bd", "bd"),
    ("b-d", "bcd"), ("ac-e", "acde"), ("a-ce", "abce")
  ]) func dopt3(_ x : String, _ y : String) async throws {
    try await run(withStdin: "abcde\n", output: y, args: "-c", "-d", x)
  }

  @Test("Escape codes with tr -d",
        arguments: [
          ("splice", "'\\n'"),
          ("splice", "'\\012'"),
          ("slice", "'\n'p"),
          ("slice", "'\\012'p"),
        ]) func dopt4(_ output: String, _ pattern: String) async throws {
    try await run(withStdin: "spl\nice", output: output, args: "-d", pattern)
  }
  
  @Test("=x= with tr -d") func dopt5() async throws {
    try await run(withStdin: "abcde\n", output: "abde\n", args: "-d", "[=c=]")
    try await run(withStdin: "abcde\n", output: "bde\n", args: "-d", "'[=c=]'a")
  }

  @Test("make sure 0 works with tr -d") func dopt6() async throws {
    try await run(withStdin: "a\0\0\0b\n", output: "ab\n", args: "-d", "'\\0'")
  }

  @Test("test posix classes with tr -d", .serialized, arguments: [
    ("'[:alnum:]'", "aAzZ.123\n", ".\n"),
    ("'[:alpha:]'", "aAzZ.123\n", ".123\n"),
    ("'[:blank:]'", "a z\n", "az\n"),
    ("'[:cntrl:]'", "a\nz\n", "az"),
    ("'[:digit:]'", "aAzZ.123\n", "aAzZ.\n"),
    ("'[:graph:]'", "a z.123\n", " \n"),
    ("'[:lower:]'", "aAzZ.123\n", "AZ.123\n"),
    ("'[:print:]'", "aAzZ.123\n", "\n"),
    ("'[:punct:]'", "aAzZ.12\n", "aAzZ12\n"),
    ("'[:space:]'", "a z\n", "az"),
    ("'[:upper:]'", "aAzZ.123\n", "az.123\n"),
    ("'[:xdigit:]'", "aAzZ.123\n", "zZ.\n")
  ]) func dopt7(_ x : String, _ y : String, _ z : String) async throws {
    try await run( withStdin: y, output: z, args: "-d", x)
  }

  
  @Test("Tests for tr -s", .serialized, arguments: [
    ("x", "abcde", "abcde"),
    ("c", "abcde", "abcde"),
    ("c", "abcccde", "abcde"),
    ("bd", "abbbcddde", "abcde"),
    ("b-d", "abbbcccddde", "abcde"),
    ("c", "acac", "acac"),
    ("c", "accacc", "acac"),
  ]) func sopt(_ x : String, _ y : String, _ z : String) async throws {
    try await run(withStdin: y, output: z, args: "-s", x)
  }
  
  @Test("Tests for tr -c -s", .serialized, arguments: [
    ("x", "abcde", "abcde"),
    ("c", "abcde", "abcde"),
    ("c", "abcccde", "abcccde"),
    ("bd", "abbbcddde", "abbbcddde"),
    ("b-d", "abbbcccddde", "abbbcccddde"),
    ("b-d", "aaabcccde", "abcccde"),
  ]) func sopt2(_ x : String, _ y : String, _ z : String) async throws {
    try await run(withStdin: y, output: z, args: "-c", "-s", x)
  }
  
  @Test("Tests for ts -ds", .serialized, arguments: [
    ("x", "y", "abcde", "abcde"),
    ("c", "x", "abcde", "abde"),
    ("x", "c", "abcde", "abcde"),
    ("c", "c", "abcde", "abde"),
    ("c", "x", "abcccde", "abde"),
    ("x", "c", "abcccde", "abcde"),
    ("c", "c", "abcccde", "abde"),
  ]) func dsopt(_ x : String, _ y : String, _ z : String, _ r : String) async throws {
    try await run(withStdin: z, output: r, args: "-ds", x, y)
  }
  
  @Test("Tests for ts -c -ds", .serialized, arguments: [
    ("x", "y", "abcde", ""),
    ("c", "x", "abcde", "c"),
    ("x", "c", "abcde", ""),
    ("c", "c", "abcde", "c"),
    ("c", "x", "abcccde", "ccc"),
    ("x", "c", "abcccde", ""),
    ("c", "c", "abcccde", "c"),
  ]) func dsopt2(_ x : String, _ y : String, _ z : String, _ r : String) async throws {
    try await run(withStdin: z, output: r, args: "-c", "-ds", x, y)
  }
  

  @Test("Tests for substitution", .serialized, arguments: [
    ("a-c", "a-c", "abcde", "abcde"),
    ("a-c", "cba", "abcde", "cbade"),
    ("a-z", "a-z", "abcde", "abcde"),
    ("a-z", "b-za", "abcde", "bcdef"),
    ("b-za", "a-z", "abcde", "zabcd"),
    ("a", "b", "ababa", "bbbbb"),
    ("a-z", "n-za-m", "sheesh", "furrfu"),
    ("n-za-m", "a-z", "sheesh", "furrfu"),
    ("a-z", "A-Z", "abcde", "ABCDE"),
    ("'[:lower:]'", "'[:upper:]'", "abc", "ABC"),
    ("a-z", "bozo", "abcde", "bozoo"),
    ("a-z", "qa", "abcde", "qaaaa"),
  ]) func subst(_ x : String, _ y : String, _ z : String, _ r : String) async throws {
    try await run(withStdin: z, output: r, args: x, y)
  }

  @Test("You can use -s with substitution", arguments: [
    ("a-c", "cba", "abcde", "cbade"),
    ("a-c", "cba", "aabbccddee", "cbaddee"),
  ])
  func subst2(_ x : String, _ y : String, _ z : String, _ r : String) async throws {
    try await run(withStdin: z, output: r, args: "-s", x, y)
 }
  
  @Test("Tests for tr substitution with -c", arguments: [
    (["'\\0-ac-\\377'", "b"], "abcde\n", "abcde\n"),
    (["'\\0-ad-\\377'", "bc"], "abcde\n", "abcde\n"),
    (["'\\0-@'", "QUACK"], "ABCDE\n", "QUACK\n")
  ]) func csubst(_ args : [String], _ inp : String, _ outp : String) async throws {
    try await run(withStdin: inp, output: outp, args: ["-c"]+args, env: ["LC_ALL":""])
  }
  
  @Test("Legacy tests", arguments: [
    (false,"00", ["abcde", "12345"]),
    (false,"01", ["12345", "abcde"]),
    (false,"02", ["-d", "aceg"]),
    (false,"03", ["[[:lower:]]", "[[:upper:]]"]),
    (false,"04", ["[[:alpha:]]", "."]),

    (true, "06", ["[[:digit:]]", "?"]),
    (true, "07", ["[[:alnum:]]", "#"]),
    (true, "0b", [ "-cd", "[[:xdigit:]]"]),
    
  ]) func legacy(_ ix : Bool, _ f : String, _ a : [String]) async throws {
    let i = try fileContents("regress.in" )
    let i2 = try fileContents("regress2.in" )
    let expected1 = try fileContents("regress.\(f).out")
    try await run(withStdin: ix ? i2 : i, output: expected1, args: a)
  }
  
  
//    let (_, j6, _) = try run(cl, ex, ["abcde", "12345"], i)
//    #expect( j6 == try fileContents("trTest", "regress.05", withExtension: "out"))

//    let (_, j9, _) = try run(cl, ex, ["abcde", "12345"], i)
//    #expect( j9 == try fileContents("trTest", "regress.08", withExtension: "out"))
  
  
  @Test("Legacy2 tests", arguments: [
    ("\u{0c}\r\n", "09", ["\\014\\r", "?#"]),
    ("0xdeadbeef\n", "0a", ["x[[:xdigit:]]", "?\\$"]),
    ("[[[[]]]]]\n", "0c", ["-d", "[=]=]"]),
    ("]=[\n", "0d", ["-d", "[=]"]),
  ]) func legacy2( _ si : String, _ f : String, _ a : [String] ) async throws {
    let i = try fileContents("regress.in" )
    let i2 = try fileContents("regress2.in" )
    
    let expected1 = try fileContents("regress.\(f).out")
    try await run(withStdin: si, output: expected1, args: a)
  }

}
