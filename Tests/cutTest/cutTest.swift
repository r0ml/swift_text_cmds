// Generated by Robert "r0ml" Lefkowitz <code@liberally.net> in 2024
// from files containing the following notices:

/*
  
  Copyright (c) 2017 Dell EMC
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
  
  THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
  FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
  OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
  SUCH DAMAGE.
  
  $FreeBSD$
*/

/*
  Copyright (c) 2008, 2009 The NetBSD Foundation, Inc.
  All rights reserved.
  
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.
  
  THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
 */

import ShellTesting

@Suite(.serialized) class cutTest : ShellTest {

  let cmd = "cut"
  let suite = "cutTest"

  let fields = ["1", "2", "3", "1-2", "2,3", "4", "1-3,4-7", "1,2-7"]
  
  @Test("Checks basic functionality", .serialized, arguments: 0..<8) func basic(_ n : Int) async throws {
    let res = try inFile("d_cut.in")
    
    let os = [
//      ----- test: cut -f 1  d_cut.in ----- 0
"""
1

12

qwe
1

12:34:56
qwe:rty:uio:p[]:asd:fgh:jkl:zxc:vbn:nm
:qwe:::rty:uio::p[]:asd:fgh:jkl:zxc:vbn:nm

""",
//      ----- test: cut -f 2  d_cut.in ----- 1
"""
1

34
12

1

12:34:56
qwe:rty:uio:p[]:asd:fgh:jkl:zxc:vbn:nm
:qwe:::rty:uio::p[]:asd:fgh:jkl:zxc:vbn:nm

""",
// ----- test: cut -f 3  d_cut.in ----- 2
"""
1

56

rty
1

12:34:56
qwe:rty:uio:p[]:asd:fgh:jkl:zxc:vbn:nm
:qwe:::rty:uio::p[]:asd:fgh:jkl:zxc:vbn:nm

""",
//      ----- test: cut -f 1-2  d_cut.in ----- 3
"""
1

12\t34
\t12
qwe\t
1

12:34:56
qwe:rty:uio:p[]:asd:fgh:jkl:zxc:vbn:nm
:qwe:::rty:uio::p[]:asd:fgh:jkl:zxc:vbn:nm

""",
// ----- test: cut -f 2,3  d_cut.in ----- 4
"""
1

34\t56
12\t
\trty
1

12:34:56
qwe:rty:uio:p[]:asd:fgh:jkl:zxc:vbn:nm
:qwe:::rty:uio::p[]:asd:fgh:jkl:zxc:vbn:nm

""",
//      ----- test: cut -f 4  d_cut.in ----- 5
"""
1


34
uio
1

12:34:56
qwe:rty:uio:p[]:asd:fgh:jkl:zxc:vbn:nm
:qwe:::rty:uio::p[]:asd:fgh:jkl:zxc:vbn:nm

""",
// ----- test: cut -f 1-3,4-7  d_cut.in ----- 6
"""
1

12\t34\t56
\t12\t\t34\t56
qwe\t\trty\tuio\tp[]\tasd\t
1

12:34:56
qwe:rty:uio:p[]:asd:fgh:jkl:zxc:vbn:nm
:qwe:::rty:uio::p[]:asd:fgh:jkl:zxc:vbn:nm

""",
// ----- test: cut -f 1,2-7  d_cut.in -----
"""
1

12\t34\t56
\t12\t\t34\t56
qwe\t\trty\tuio\tp[]\tasd\t
1

12:34:56
qwe:rty:uio:p[]:asd:fgh:jkl:zxc:vbn:nm
:qwe:::rty:uio::p[]:asd:fgh:jkl:zxc:vbn:nm

"""
    ]
    try await run(output: os[n], args: "-f", fields[n], res)
  }

  @Test("Checks -s flag", .serialized, arguments: 0..<8) func sflag(_ n : Int) async throws {
//    let o = try fileContents("cutTest", "d_sflag", withExtension: "out")
    let res = try inFile("d_cut.in")
    let os = [
//      ----- test: cut -f 1 -s d_cut.in ----- 0
"""
12

qwe

""",
//      ----- test: cut -f 2 -s d_cut.in ----- 1
"""
34
12


""",
// ----- test: cut -f 3 -s d_cut.in ----- 2
"""
56

rty

""",
// ----- test: cut -f 1-2 -s d_cut.in ----- 3
"""
12\t34
\t12
qwe\t

""",
// ----- test: cut -f 2,3 -s d_cut.in ----- 4
"""
34\t56
12\t
\trty

""",
// ----- test: cut -f 4 -s d_cut.in ----- 5
"""

34
uio

""",
// ----- test: cut -f 1-3,4-7 -s d_cut.in ----- 6
"""
12\t34\t56
\t12\t\t34\t56
qwe\t\trty\tuio\tp[]\tasd\t

""",
//      ----- test: cut -f 1,2-7 -s d_cut.in ----- 7
"""
12\t34\t56
\t12\t\t34\t56
qwe\t\trty\tuio\tp[]\tasd\t

"""
    ]
    try await run(output: os[n], args: "-s", "-f", fields[n], res)
  }

  @Test("Checks -d flag", .serialized, arguments: 0..<8) func dflag(_ n : Int) async throws {
    // let o = try fileContents("cutTest", "d_dflag", withExtension: "out")
    let res = try inFile("d_cut.in")
    let os = [
//      ----- test: cut -f 1 -d : d_cut.in ----- 0
"""
1

12\t34\t56
\t12\t\t34\t56
qwe\t\trty\tuio\tp[]\tasd\t\tfgh\tjkl\tzxc\tvbn\tnm
1

12
qwe


""",
// ----- test: cut -f 2 -d : d_cut.in ----- 1
"""
1

12\t34\t56
\t12\t\t34\t56
qwe\t\trty\tuio\tp[]\tasd\t\tfgh\tjkl\tzxc\tvbn\tnm
1

34
rty
qwe

""",
// ----- test: cut -f 3 -d : d_cut.in ----- 2
"""
1

12\t34\t56
\t12\t\t34\t56
qwe\t\trty\tuio\tp[]\tasd\t\tfgh\tjkl\tzxc\tvbn\tnm
1

56
uio


""",
// ----- test: cut -f 1-2 -d : d_cut.in ----- 3
"""
1

12\t34\t56
\t12\t\t34\t56
qwe\t\trty\tuio\tp[]\tasd\t\tfgh\tjkl\tzxc\tvbn\tnm
1

12:34
qwe:rty
:qwe

""",
// ----- test: cut -f 2,3 -d : d_cut.in ----- 4
"""
1

12\t34\t56
\t12\t\t34\t56
qwe\t\trty\tuio\tp[]\tasd\t\tfgh\tjkl\tzxc\tvbn\tnm
1

34:56
rty:uio
qwe:

""",
// ----- test: cut -f 4 -d : d_cut.in ----- 5
"""
1

12\t34\t56
\t12\t\t34\t56
qwe\t\trty\tuio\tp[]\tasd\t\tfgh\tjkl\tzxc\tvbn\tnm
1


p[]


""",
// ----- test: cut -f 1-3,4-7 -d : d_cut.in ----- 6
"""
1

12\t34\t56
\t12\t\t34\t56
qwe\t\trty\tuio\tp[]\tasd\t\tfgh\tjkl\tzxc\tvbn\tnm
1

12:34:56
qwe:rty:uio:p[]:asd:fgh:jkl
:qwe:::rty:uio:

""",
// ----- test: cut -f 1,2-7 -d : d_cut.in ----- 7
"""
1

12\t34\t56
\t12\t\t34\t56
qwe\t\trty\tuio\tp[]\tasd\t\tfgh\tjkl\tzxc\tvbn\tnm
1

12:34:56
qwe:rty:uio:p[]:asd:fgh:jkl
:qwe:::rty:uio:

""",
    ]
    try await run(output: os[n], args: "-d", ":", "-f", fields[n], res)
  }

  @Test("Checks -s and -d flags combined", .serialized, arguments: 0..<8) func dsflag(_ n : Int) async throws {
//    let o = try fileContents("cutTest", "d_dsflag", withExtension: "out")
    let res = try inFile("d_cut.in")
    let os = [
//      ----- test: cut -f 1 -d : -s d_cut.in -----
      """
12
qwe


""",
//      ----- test: cut -f 2 -d : -s d_cut.in -----
      """
34
rty
qwe

""",
//      ----- test: cut -f 3 -d : -s d_cut.in -----
      """
56
uio


""",
//      ----- test: cut -f 1-2 -d : -s d_cut.in -----
"""
12:34
qwe:rty
:qwe

""",
//      ----- test: cut -f 2,3 -d : -s d_cut.in -----
      """
34:56
rty:uio
qwe:

""",
//      ----- test: cut -f 4 -d : -s d_cut.in -----
"""

p[]


""",
//      ----- test: cut -f 1-3,4-7 -d : -s d_cut.in -----
"""
12:34:56
qwe:rty:uio:p[]:asd:fgh:jkl
:qwe:::rty:uio:

""",
//      ----- test: cut -f 1,2-7 -d : -s d_cut.in -----
      """
12:34:56
qwe:rty:uio:p[]:asd:fgh:jkl
:qwe:::rty:uio:

"""
    ]
    try await run(output: os[n], args: "-d", ":", "-s", "-f", fields[n], res)
  }

  @Test("Checks support for non-ascii characters") func latin1() async throws {
    let o1 = "bar\nBar\nBAr\nBAR\n"
    let res = try inFile("d_latin1.in")
    try await run(output: o1, args: "-b", "6,7,8", res
                  // This is required for command-line swift test
                  // but it seems like any values work
                  , env: ["LANG":"C", "LC_ALL":"C"])
    
    let o2 = "bar\nBar\nBAr\nBAR\n"
    try await run(output: o2, args: "-c", "6,7,8", res, env: ["LANG":"C", "LC_ALL":"C"])
  }

  @Test("Checks support for multibyte characters") func utf8() async throws {
    let o1 = ":ba\n:Ba\n:BA\n:BA\n"
    let res = try inFile("d_utf8.in")
    try await run(output: o1, args: "-b", "6,7,8", res, env: ["LC_ALL": "C"])
    
    let o2 = "bar\nBar\nBAr\nBAR\n"
    try await run(output: o2, args: "-c", "6,7,8", res, env: ["LC_ALL": "en_US.UTF-8"])
  }

  @Test("Check -s flag") func s_flag() async throws {
    let i = """
a,b,c,d
b,c,d
c,d
d

"""
    try await run(withStdin: i, output: "a\nb\nc\n", args: "-d,", "-f", "1", "-s")

    try await run(withStdin: i, output: "d\n\n\n", args: "-d,", "-f", "4", "-s")

    try await run(withStdin: i, output: "a,b,\nb,\n\n", args: "-d", "c", "-f", "1", "-s")

    try await run(withStdin: i, output: "", args: "-d!", "-f", "1", "-s")
  }

}
