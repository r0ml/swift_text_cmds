
// Generated by Robert "r0ml" Lefkowitz <code@liberally.net> in 2024
// from files containing the following notices:

/*
  Copyright (c) 2011 The NetBSD Foundation, Inc.
  All rights reserved.
 
  This code is derived from software contributed to The NetBSD Foundation
  by Jukka Ruohonen.
 
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.
 
  THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
 */

/*
  Copyright (c) 2017 Alan Somers
 
  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions
  are met:
  1. Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.
  2. Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in the
     documentation and/or other materials provided with the distribution.
 
  THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
  ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
  TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
  PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
  BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  POSSIBILITY OF SUCH DAMAGE.
 */


import ShellTesting

class prTest : ShellTest {

  let cmd = "pr"
  let suiteBundle = "text_cmds_prTest"
  
  @Test("A basic test of pr(1) (cf. PR bin/41080)") func basic() async throws {
    let inp = try inFile("d_basic.in")
    let expected = try fileContents("d_basic.out")
    try await run(output: expected, args: "-t", "-2", inp)
  }

  @Test("Format columns in round-robin order with pr -a") func across() async throws {
    let inp = try inFile("other.in")
    let expected = try fileContents("across.out")
    try await run(output: expected, args: "-t", "-a", "-2", inp)
  }
  
  @Test("Merge two files with pr -m") func merge() async throws {
    let inp1 = try inFile("d_basic.in")
    let inp2 = try inFile("other.in")
    let expected = try fileContents("merge.out")
    try await run(output: expected, args: "-t", "-m", inp1, inp2)
  }
  
  @Test("Format a file with three columns") func threecol() async throws {
    let inp = try inFile("other.in")
    let expected = try fileContents("threecol.out")
    try await run(output: expected, args: "-t", "-3", inp)
  }


// ✅ Functional Test Cases for pr (generated by ChatGPT)
  /*
   1. Basic single-file input
   pr file.txt
   Paginate a single text file
   Output with page headers and footers
   2. Specify number of columns
   pr -2 file.txt
   Format output in 2 columns
   Output shows 2 columns with proper spacing
   3. Set page length
   pr -l 20 file.txt
   Limit page to 20 lines
   Each page contains 20 lines, header/footer included
   4. Suppress header/footer
   pr -t file.txt
   No page headers/footers
   Output contains only file content
   5. Double space lines
   pr -d file.txt
   Double space between lines
   Each line is followed by a blank line
   6. Add date in header
   pr -h "Report" file.txt
   Custom header title
   Header shows “Report” instead of filename
   7. Use multiple files
   pr file1.txt file2.txt
   Concatenate and paginate multiple files
   Output includes each file with page breaks
   8. Merge files in parallel
   pr -m file1.txt file2.txt
   Merge files side by side
   Files are shown in parallel columns
   9. Print page range
   `pr -n -f file.txt
   sed -n ‘/^Page 2/,/^Page 3/p’`
   Print specific page range
   10. Tab character expansion
   pr file.txt with tabs
   Handles tab characters
   Output correctly aligns tabbed content

   */


  // ⚠️ Edge Case Test Cases (generated by ChatGPT)
  /*
   11. Empty file
   pr empty.txt
   No content in file
   Still prints headers and footers with blank body
   12. File does not exist
   pr missing.txt
   File is not found
   Error message: pr: missing.txt: No such file or directory
   13. Binary file input
   pr binary.bin
   Non-text input
   May print garbage or control characters
   14. Excessively long line
   File with 1000+ char lines
   See how line wrapping works
   Lines are wrapped or truncated depending on terminal width
   15. Invalid option
   pr -z file.txt
   Unsupported flag
   Error message: pr: illegal option -- z

   */

}
